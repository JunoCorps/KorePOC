// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "koredata": suggestion Resource Client
//
// Command:
// $ goagen
// --design=github.com/hegemone/kore-poc/koredata-goa/design
// --out=$(GOPATH)/src/github.com/hegemone/kore-poc/koredata-goa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateSuggestionPayload is the suggestion create action payload.
type CreateSuggestionPayload struct {
	// The ID of the show
	ShowID string `form:"ShowID" json:"ShowID" xml:"ShowID"`
	// Identity of suggester
	Suggester string `form:"Suggester" json:"Suggester" xml:"Suggester"`
	// The suggested title
	Title string `form:"Title" json:"Title" xml:"Title"`
}

// CreateSuggestionPath computes a request path to the create action of suggestion.
func CreateSuggestionPath() string {

	return fmt.Sprintf("/suggestion/")
}

// Create a new suggestion
func (c *Client) CreateSuggestion(ctx context.Context, path string, payload *CreateSuggestionPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateSuggestionRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateSuggestionRequest create the request corresponding to the create action endpoint of the suggestion resource.
func (c *Client) NewCreateSuggestionRequest(ctx context.Context, path string, payload *CreateSuggestionPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ListSuggestionPath computes a request path to the list action of suggestion.
func ListSuggestionPath(showID string) string {
	param0 := showID

	return fmt.Sprintf("/suggestion/%s", param0)
}

// Return all suggestions for a given show ID
func (c *Client) ListSuggestion(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSuggestionRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSuggestionRequest create the request corresponding to the list action endpoint of the suggestion resource.
func (c *Client) NewListSuggestionRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
