package actions

import (
	"github.com/dahendel/kore-poc/buffalo_poc/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Quote)
// DB Table: Plural (quotes)
// Resource: Plural (Quotes)
// Path: Plural (/quotes)
// View Template Folder: Plural (/templates/quotes/)

// QuotesResource is the resource for the Quote model
type QuotesResource struct {
	buffalo.Resource
}

// List gets all Quotes. This function is mapped to the path
// GET /quotes
func (v QuotesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	quotes := &models.Quotes{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Quotes from the DB
	if err := q.All(quotes); err != nil {
		return errors.WithStack(err)
	}

	// Make Quotes available inside the html template
	c.Set("quotes", quotes)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("quotes/index.html"))
}

// Show gets the data for one Quote. This function is mapped to
// the path GET /quotes/{quote_id}
func (v QuotesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Quote
	quote := &models.Quote{}

	// To find the Quote the parameter quote_id is used.
	if err := tx.Find(quote, c.Param("quote_id")); err != nil {
		return c.Error(404, err)
	}

	// Make quote available inside the html template
	c.Set("quote", quote)

	return c.Render(200, r.HTML("quotes/show.html"))
}

// New renders the form for creating a new Quote.
// This function is mapped to the path GET /quotes/new
func (v QuotesResource) New(c buffalo.Context) error {
	// Make quote available inside the html template
	c.Set("quote", &models.Quote{})

	return c.Render(200, r.HTML("quotes/new.html"))
}

// Create adds a Quote to the DB. This function is mapped to the
// path POST /quotes
func (v QuotesResource) Create(c buffalo.Context) error {
	// Allocate an empty Quote
	quote := &models.Quote{}

	// Bind quote to the html form elements
	if err := c.Bind(quote); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(quote)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make quote available inside the html template
		c.Set("quote", quote)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("quotes/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Quote was created successfully")

	// and redirect to the quotes index page
	return c.Redirect(302, "/quotes/%s", quote.ID)
}

// Edit renders a edit form for a Quote. This function is
// mapped to the path GET /quotes/{quote_id}/edit
func (v QuotesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Quote
	quote := &models.Quote{}

	if err := tx.Find(quote, c.Param("quote_id")); err != nil {
		return c.Error(404, err)
	}

	// Make quote available inside the html template
	c.Set("quote", quote)
	return c.Render(200, r.HTML("quotes/edit.html"))
}

// Update changes a Quote in the DB. This function is mapped to
// the path PUT /quotes/{quote_id}
func (v QuotesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Quote
	quote := &models.Quote{}

	if err := tx.Find(quote, c.Param("quote_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Quote to the html form elements
	if err := c.Bind(quote); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(quote)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make quote available inside the html template
		c.Set("quote", quote)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("quotes/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Quote was updated successfully")

	// and redirect to the quotes index page
	return c.Redirect(302, "/quotes/%s", quote.ID)
}

// Destroy deletes a Quote from the DB. This function is mapped
// to the path DELETE /quotes/{quote_id}
func (v QuotesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Quote
	quote := &models.Quote{}

	// To find the Quote the parameter quote_id is used.
	if err := tx.Find(quote, c.Param("quote_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(quote); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Quote was destroyed successfully")

	// Redirect to the quotes index page
	return c.Redirect(302, "/quotes")
}
