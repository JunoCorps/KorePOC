package actions

import (
	"github.com/dahendel/kore-poc/buffalo_poc/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Droplet)
// DB Table: Plural (droplets)
// Resource: Plural (Droplets)
// Path: Plural (/droplets)
// View Template Folder: Plural (/templates/droplets/)

// DropletsResource is the resource for the Droplet model
type DropletsResource struct {
	buffalo.Resource
}

// List gets all Droplets. This function is mapped to the path
// GET /droplets
func (v DropletsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	droplets := &models.Droplets{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Droplets from the DB
	if err := q.All(droplets); err != nil {
		return errors.WithStack(err)
	}

	// Make Droplets available inside the html template
	c.Set("droplets", droplets)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("droplets/index.html"))
}

// Show gets the data for one Droplet. This function is mapped to
// the path GET /droplets/{droplet_id}
func (v DropletsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Droplet
	droplet := &models.Droplet{}

	// To find the Droplet the parameter droplet_id is used.
	if err := tx.Find(droplet, c.Param("droplet_id")); err != nil {
		return c.Error(404, err)
	}

	// Make droplet available inside the html template
	c.Set("droplet", droplet)

	return c.Render(200, r.HTML("droplets/show.html"))
}

// New renders the form for creating a new Droplet.
// This function is mapped to the path GET /droplets/new
func (v DropletsResource) New(c buffalo.Context) error {
	// Make droplet available inside the html template
	c.Set("droplet", &models.Droplet{})

	return c.Render(200, r.HTML("droplets/new.html"))
}

// Create adds a Droplet to the DB. This function is mapped to the
// path POST /droplets
func (v DropletsResource) Create(c buffalo.Context) error {
	// Allocate an empty Droplet
	droplet := &models.Droplet{}

	// Bind droplet to the html form elements
	if err := c.Bind(droplet); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(droplet)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make droplet available inside the html template
		c.Set("droplet", droplet)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("droplets/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Droplet was created successfully")

	// and redirect to the droplets index page
	return c.Redirect(302, "/droplets/%s", droplet.ID)
}

// Edit renders a edit form for a Droplet. This function is
// mapped to the path GET /droplets/{droplet_id}/edit
func (v DropletsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Droplet
	droplet := &models.Droplet{}

	if err := tx.Find(droplet, c.Param("droplet_id")); err != nil {
		return c.Error(404, err)
	}

	// Make droplet available inside the html template
	c.Set("droplet", droplet)
	return c.Render(200, r.HTML("droplets/edit.html"))
}

// Update changes a Droplet in the DB. This function is mapped to
// the path PUT /droplets/{droplet_id}
func (v DropletsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Droplet
	droplet := &models.Droplet{}

	if err := tx.Find(droplet, c.Param("droplet_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Droplet to the html form elements
	if err := c.Bind(droplet); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(droplet)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make droplet available inside the html template
		c.Set("droplet", droplet)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("droplets/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Droplet was updated successfully")

	// and redirect to the droplets index page
	return c.Redirect(302, "/droplets/%s", droplet.ID)
}

// Destroy deletes a Droplet from the DB. This function is mapped
// to the path DELETE /droplets/{droplet_id}
func (v DropletsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Droplet
	droplet := &models.Droplet{}

	// To find the Droplet the parameter droplet_id is used.
	if err := tx.Find(droplet, c.Param("droplet_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(droplet); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Droplet was destroyed successfully")

	// Redirect to the droplets index page
	return c.Redirect(302, "/droplets")
}

// DropletsStart default implementation.
func DropletsStart(c buffalo.Context) error {
	return c.Render(200, r.HTML("droplets/start.html"))
}

// DropletsStop default implementation.
func DropletsStop(c buffalo.Context) error {
	return c.Render(200, r.HTML("droplets/stop.html"))
}
